{"version":3,"sources":["components/MovieCard.js","pages/Movies.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","_ref","movie","loading","react_default","a","createElement","Card","Placeholder","Image","square","src","show","image","original","Content","Header","Line","length","Paragraph","react","name","getMoviesFromLocalStorage","localStorage","getItem","Movies","state","movies","JSON","parse","_this2","this","fetch","then","response","json","usersResponse","setItem","stringify","setState","Segment","className","Container","text","as","icon","textAlign","Icon","circular","Group","doubling","itemsPerRow","stackable","Array","fill","map","ind","components_MovieCard","user","key","concat","id","React","Component","App","BrowserRouter","Route","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8e6ae719.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Placeholder, Image, Card } from \"semantic-ui-react\";\nconst MovieCard = ({ movie, loading }) => {\n  return (\n    <Card>\n      {loading ? (\n        <Placeholder>\n          <Placeholder.Image square />\n        </Placeholder>\n      ) : (\n        <Image src={movie.show.image && movie.show.image.original ? movie.show.image.original : ''} />\n      )}\n\n      <Card.Content>\n        {loading ? (\n          <Placeholder>\n            <Placeholder.Header>\n              <Placeholder.Line length=\"very short\" />\n              <Placeholder.Line length=\"medium\" />\n            </Placeholder.Header>\n            <Placeholder.Paragraph>\n              <Placeholder.Line length=\"short\" />\n            </Placeholder.Paragraph>\n          </Placeholder>\n        ) : (\n          <Fragment>\n            <Card.Header>\n              {movie.show.name}\n            </Card.Header>\n          </Fragment>\n        )}\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default MovieCard;\n","import React from \"react\";\nimport { Container, Icon, Header, Segment, Card } from \"semantic-ui-react\";\nimport MovieCard from \"../components/MovieCard\";\n\nconst getMoviesFromLocalStorage = () => localStorage.getItem('movies');\n\nclass Movies extends React.Component {\n\n  state = {\n    movies: getMoviesFromLocalStorage() ? JSON.parse(getMoviesFromLocalStorage()) : null\n  };\n\n  componentDidMount() {\n    fetch(\"https://api.tvmaze.com/search/shows?q=star%20wars\").then(response => {\n        response.json().then(usersResponse => {\n          localStorage.setItem('movies', JSON.stringify(usersResponse))\n          this.setState({movies: usersResponse});\n      });\n    });\n  }\n\n  render() {\n      const {movies} = this.state;\n      return (\n          <Segment className=\"full-height\">\n            <Container text>\n              <br />\n              <Header as=\"h2\" icon textAlign=\"center\">\n                <Icon name=\"video\" circular />\n                <Header.Content>Movies</Header.Content>\n              </Header>\n              <Card.Group doubling itemsPerRow={3} stackable>\n                  {!movies &&\n                  new Array(3)\n                      .fill(true)\n                      .map((loading, ind) => (\n                          <MovieCard\n                              loading={loading}\n                              user={false}\n                              key={`loading-${ind}`}\n                          />\n                      ))}\n                  {!!movies && movies.map(movie => <MovieCard movie={movie} key={movie.show.id} />)}\n              </Card.Group>\n            </Container>\n          </Segment>\n      );\n  }\n\n};\n\nexport default Movies;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport Movies from \"./pages/Movies\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" component={Movies} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}